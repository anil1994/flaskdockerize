name: flask

on:
  push:
    branches: [ main ]

env:
  VERSION_PREFIX: "1.0"
  VERSION_SUFFIX: ${{ github.run_number }}
  NAME: "demo"
  ECR: "635719328626.dkr.ecr.eu-central-1.amazonaws.com"

jobs:    
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Docker login,tag image and Push the image  to ECR
      run: |
          aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin $ECR
          docker build -t $NAME .
          docker tag $NAME $ECR/$NAME:$VERSION_PREFIX.$VERSION_SUFFIX
          docker push $ECR/$NAME:$VERSION_PREFIX.$VERSION_SUFFIX
          echo "This image is pushed to ECR as $ECR/$NAME:$VERSION_PREFIX.$VERSION_SUFFIX"
    
  Deploy:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2 
      - name: Deploy in EC2
        env:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: eu-central-1
            PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
            HOSTNAME : ${{ secrets.HOSTNAME  }}
            USER_NAME : ${{ secrets.USER_NAME  }}
            
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
            #Now we have got the access of EC2 and we will start the deploy .
            docker pull  $ECR/$NAME:$VERSION_PREFIX.$VERSION_SUFFIX            
            docker run -it $ECR/$NAME:$VERSION_PREFIX.$VERSION_SUFFIX &
          '
